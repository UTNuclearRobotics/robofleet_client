#pragma once

#include <ros/ros.h>
#include <{msg_package}_robofleet/{msg_package}_generated.h>
#include <flatbuffers/flatbuffers.h>

// explicitly handle primitive types
template<class PrimType>
flatbuffers::Offset<flatbuffers::Vector<PrimType>> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const std::vector<PrimType>& src)
{{
  return fbb.CreateVector(src);
}}

template<class PrimType>
std::vector<PrimType> FbtoRos(const flatbuffers::Vector<PrimType>* src)
{{
  return std::vector<PrimType>(src->begin(), src->end());
}}

template<class PrimType, size_t N>
boost::array<PrimType, N> FbtoRos(const flatbuffers::Vector<PrimType>* src)
{{
  boost::array<PrimType, src->size()> output;
  std::copy(src->begin(), src->end(), output->begin());

  return output;
}}

template<class PrimType, size_t N>
boost::array<PrimType, N> FbtoRos(const flatbuffers::Offset<flatbuffers::Vector<double>>* src)
{{
  boost::array<PrimType, src->size()> output;
  std::copy(src->begin(), src->end(), output->begin());

  return output;
}}

// time and duration primitives don't follow the usual pattern,
// so handle them explicitly
ros::Time FbtoRos(const fb::RosTime* fb);

const fb::RosTime* RostoFb(flatbuffers::FlatBufferBuilder& fbb, const ros::Time& msg);

ros::Duration FbtoRos(const fb::RosDuration* fb);

const fb::RosDuration* RostoFb(flatbuffers::FlatBufferBuilder& fbb, const ros::Duration& msg);