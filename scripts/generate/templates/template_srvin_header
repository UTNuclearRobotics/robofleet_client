#pragma once

// the plugin parent class
#include <robofleet_client/ROSSrvHandlers.hpp>

// get the msg type
#include <{msg_package}/{msg_name}.h>

#include <{msg_package}_robofleet/{msg_package}_generated.h>

// message dependencies
{dependencies}

/** Request Conversion Functions **/
{msg_package}::{msg_name} FbtoRos(const fb::{msg_package}::{msg_name}* src);

std::vector<{msg_package}::{msg_name}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::{msg_name}>>* src);

flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::{msg_name}>>> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const std::vector<{msg_package}::{msg_name}>& msg);

flatbuffers::Offset<fb::{msg_package}::{msg_name}> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const {msg_package}::{msg_name}& msg);

namespace {msg_package}_robofleet {{
  
  /** Request Handler **/
  class {msg_name}SrvInHandler : public robofleet_client::ROSSrvInHandler
  {{
  public:
    typedef {msg_package}::{msg_name} SrvType;
    typedef {msg_package}::{msg_name} RequestType;
    typedef {msg_package}::{msg_name} ResponseType;

    // sets up subscriber, message scheduler function, and metadata function
    virtual bool initialize(ros::NodeHandle& nh,
                              MessageScheduler* scheduler,
                              const std::string service_name);

    // converts from flatbuffer type to raw data
    static QByteArray encode(const RequestType& msg);
    
  private:
    typedef flatbuffers::Offset<fb::MsgMetadata> MetaDataOffset;
    
    // loads metadata into the flatbuffer builder
    std::function<MetaDataOffset(flatbuffers::FlatBufferBuilder&)> encode_metadata_function_;

    // produces a buffer with metadata
    QByteArray encodeWithMetadata(const RequestType& msg);
    
    // encodes the message
    bool callback(const RequestType::ConstPtr& req, const ResponseType::ConstPtr& res);
  }};
}}