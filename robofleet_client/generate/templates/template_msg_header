#pragma once

// the plugin parent class
#include <robofleet_client/ROSMsgHandlers.hpp>

// get the msg type
#include <{msg_package}/msg/{msg_name_lowercase}.hpp>

#include <{msg_package}_robofleet/{msg_package}_generated.h>

// message dependencies
{dependencies}

/** Conversion Functions **/
{msg_package}::msg::{msg_name} FbtoRos(const fb::{msg_package}::msg::{msg_name}* src);

std::vector<{msg_package}::msg::{msg_name}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>>* src);

flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>>> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const std::vector<{msg_package}::msg::{msg_name}>& msg);

flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const {msg_package}::msg::{msg_name}& msg);

namespace {msg_package}_robofleet {{

  /** Robofleet Subscribe Handler **/
  class {msg_name}SubscribeHandler : public robofleet_client::RBFSubscribeHandler
  {{
  public:

    // advertises the topic
    virtual void initialize(rclcpp::Node* node,
                            const std::string client_topic,
                            const bool latched);
    
    // decodes raw data into the flatbuffer type,
    // then converts to the ROS type, then publishes to the ROS topic
    virtual void publishROS(const QByteArray& data);

  private:
    typedef {msg_package}::msg::{msg_name} MsgType;
    typedef fb::{msg_package}::msg::{msg_name} FbMsgType;

    // converts from raw data to flatbuffer type
    const FbMsgType* decode(const QByteArray& data);

    rclcpp::Publisher<MsgType>::SharedPtr ros_pub_;
  }};
  
  
  /** Robofleet Publish Handler **/
  class {msg_name}PublishHandler : public robofleet_client::RBFPublishHandler
  {{
  public:
    // sets up subscriber, message scheduler function, and metadata function
    virtual void initialize(rclcpp::Node* node,
                            MessageScheduler& scheduler,
                            const std::string client_topic,
                            const std::string rbf_topic,
                            const double priority,
                            const double rate_limit,
                            const bool no_drop,
                            const int queue_size);

    virtual void initialize(rclcpp::Node* node,
                            WsServer& server,
                            const std::string client_topic,
                            const std::string rbf_topic);
    
  private:
    typedef {msg_package}::msg::{msg_name} MsgType;
    typedef std::shared_ptr<MsgType> MsgTypeConstPtr;

    // produces a buffer with metadata
    QByteArray encodeWithMetadata(const MsgType& msg);
    
    // encodes the message
    void callback(const MsgType& msg);

    rclcpp::Subscription<MsgType>::SharedPtr ros_sub_;
  }};
}}