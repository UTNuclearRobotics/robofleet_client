#include <{srv_package}_robofleet/srv/{srv_filename}.hpp>
#include <QByteArray>

{srv_package}::srv::{response_type} FbtoRos(const fb::{srv_package}::msg::{response_type}* src)
{{
  {srv_package}::srv::{response_type} msg;{response_decode_assignments}

  return msg;
}}

std::vector<{srv_package}::srv::{response_type}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{response_type}>>* src)
{{
  std::vector<{srv_package}::srv::{response_type}> dst;
  dst.reserve(src->size());
  typedef flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{response_type}>> fvec;
  for (fvec::const_iterator it = src->begin(); it != src->end(); ++it)
  {{
    dst.push_back(FbtoRos(*it));
  }}

  return dst;
}}

{srv_package}::srv::{request_type} FbtoRos(const fb::{srv_package}::msg::{request_type}* src)
{{
  {srv_package}::srv::{request_type} msg;{request_decode_assignments}

  return msg;
}}

std::vector<{srv_package}::srv::{request_type}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{request_type}>>* src)
{{
  std::vector<{srv_package}::srv::{request_type}> dst;
  dst.reserve(src->size());
  typedef flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{request_type}>> fvec;
  for (fvec::const_iterator it = src->begin(); it != src->end(); ++it)
  {{
    dst.push_back(FbtoRos(*it));
  }}

  return dst;
}}

namespace {srv_package}_robofleet {{

  void {srv_type}SrvInHandler::initialize(std::shared_ptr<rclcpp::Node> node,
                                          MessageScheduler& scheduler,
                                          const std::string client_service,
                                          const std::string rbf_topic,
                                          const rclcpp::Duration timeout)
  {{
    robofleet_client::ROSSrvInHandler::initialize(node,
                                                  scheduler,
                                                  client_service,
                                                  rbf_topic,
                                                  timeout);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb, "{srv_package}::{srv_type}", rbf_topic.c_str());
      }};

    using std::placeholders::_1;
    using std::placeholders::_2;
    server_ = node->create_service<SrvType>(client_service, std::bind(&{srv_type}SrvInHandler::callback, this, _1, _2));
  }}

  void {srv_type}SrvInHandler::initialize(std::shared_ptr<rclcpp::Node> node,
                                          WsServer& server,
                                          const std::string client_service,
                                          const std::string rbf_topic,
                                          const rclcpp::Duration timeout)
  {{
    robofleet_client::ROSSrvInHandler::initialize(node,
                                                  server,
                                                  client_service,
                                                  rbf_topic,
                                                  timeout);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb, "{srv_package}::{srv_type}", rbf_topic.c_str());
      }};

    using std::placeholders::_1;
    using std::placeholders::_2;
    server_ = node->create_service<SrvType>(client_service, std::bind(&{srv_type}SrvInHandler::callback, this, _1, _2));
  }}

  
  QByteArray {srv_type}SrvInHandler::encodeRequestWithMetadata(const std::shared_ptr<RequestType> msg)
  {{
    flatbuffers::FlatBufferBuilder fbb;

    // encode the metadata
    const MetaDataOffset metadata = encode_metadata_function_(fbb);

    // encode the rest of the type
    const flatbuffers::uoffset_t root_offset =
          fb::{srv_package}::msg::Create{request_type}(fbb,
                                              metadata{request_encode_assignments}).o;

    fbb.Finish(flatbuffers::Offset<void>(root_offset));
    const QByteArray data{{reinterpret_cast<const char*>(fbb.GetBufferPointer()),
                          static_cast<int>(fbb.GetSize())}};

    return data;
  }}
  
  QByteArray {srv_type}SrvInHandler::encodeRequest(const std::shared_ptr<RequestType> msg)
  {{
    flatbuffers::FlatBufferBuilder fbb;

    // not including metadata
    const MetaDataOffset metadata = 0;

    const flatbuffers::uoffset_t root_offset =
          fb::{srv_package}::msg::Create{request_type}(fbb,
                                                  metadata{request_encode_assignments}).o;

    fbb.Finish(flatbuffers::Offset<void>(root_offset));
    const QByteArray data{{reinterpret_cast<const char*>(fbb.GetBufferPointer()),
                          static_cast<int>(fbb.GetSize())}};

    return data;
  }}

  bool {srv_type}SrvInHandler::callback(const std::shared_ptr<RequestType> req,
                                        std::shared_ptr<ResponseType> res)
  {{
    // encode request and schedule for transmission
    const QByteArray data = encodeRequestWithMetadata(req);
    schedule_function_(data);

    // wait until we get a response
    // awaitResponse will return false if we timed out
    if (!awaitReponse())
    {{
      return false;
    }}

    // decode response
    const FbResponseType* fb = decodeResponse(response_data_);
    *res = FbtoRos(fb);

    return true;
  }}



  void {srv_type}SrvOutHandler::initialize(std::shared_ptr<rclcpp::Node> node,
                                           MessageScheduler& scheduler,
                                           const std::string client_service,
                                           const std::string rbf_topic)
  {{
    robofleet_client::ROSSrvOutHandler::initialize(node,
                                                   scheduler,
                                                   client_service,
                                                   rbf_topic);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb,
                                           rosidl_generator_traits::data_type<SrvType>(),
                                           rbf_topic.c_str());
      }};

    rclcpp::Client<SrvType>::SharedPtr client =
      node->create_client<SrvType>(client_service);
  }}

  void {srv_type}SrvOutHandler::initialize(std::shared_ptr<rclcpp::Node> node,
                                           WsServer& server,
                                           const std::string client_service,
                                           const std::string rbf_topic)
  {{
    robofleet_client::ROSSrvOutHandler::initialize(node,
                                                   server,
                                                   client_service,
                                                   rbf_topic);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb, rosidl_generator_traits::data_type<SrvType>(), rbf_topic.c_str());
      }};

    client_ = node->create_client<SrvType>(client_service);
  }}

  const {srv_type}SrvOutHandler::FbRequestType*
  {srv_type}SrvOutHandler::decodeRequest(const QByteArray& data)
  {{
    const FbRequestType* root = 
      flatbuffers::GetRoot<FbRequestType>(data.data());

    return root;
  }}

  QByteArray {srv_type}SrvOutHandler::encodeResponseWithMetadata(const std::shared_ptr<ResponseType> msg)
  {{
    flatbuffers::FlatBufferBuilder fbb;

    // encode the metadata
    const MetaDataOffset metadata = encode_metadata_function_(fbb);

    // encode the rest of the type
    const flatbuffers::uoffset_t root_offset =
          fb::{srv_package}::msg::Create{response_type}(fbb,
                                              metadata{response_encode_assignments}).o;

    fbb.Finish(flatbuffers::Offset<void>(root_offset));
    const QByteArray data{{reinterpret_cast<const char*>(fbb.GetBufferPointer()),
                          static_cast<int>(fbb.GetSize())}};

    return data;
  }}
  
  void {srv_type}SrvOutHandler::sendRequest(const QByteArray& data,
                                            const std::shared_ptr<rclcpp::Node> node,
                                            const std::string client_service)
  {{
    // decode the request
    const FbRequestType* fb = decodeRequest(data);

    auto request = std::make_shared<SrvType::Request>();
    *request = FbtoRos(fb);
    
    // send on to the final recipient
    auto result = client_->async_send_request(request);

    // Wait for the result
    if (rclcpp::spin_until_future_complete(node->get_node_base_interface(), result) !=
      rclcpp::FutureReturnCode::SUCCESS)
    {{
      RCLCPP_ERROR(rclcpp::get_logger("rclcpp"), "Request failed on service %s.", client_service.c_str());
      return;
    }}

    // encode the response
    const QByteArray response_data = encodeResponseWithMetadata(result.get());

    // send the response back
    schedule_function_(response_data);
  }}
}} // namespace {srv_package}_robofleet

#include <pluginlib/class_list_macros.hpp>
PLUGINLIB_EXPORT_CLASS({srv_package}_robofleet::{srv_type}SrvInHandler, robofleet_client::ROSSrvInHandler)
PLUGINLIB_EXPORT_CLASS({srv_package}_robofleet::{srv_type}SrvOutHandler, robofleet_client::ROSSrvOutHandler)