#include <{msg_package}_robofleet/msg/{msg_name}.hpp>
#include <QByteArray>
#include <rclcpp/qos.hpp>

{msg_package}::msg::{msg_name} FbtoRos(const fb::{msg_package}::msg::{msg_name}* src)
{{
  {msg_package}::msg::{msg_name} msg;{msg_decode_assignments}

  return msg;
}}

{msg_package}::msg::{msg_name} FbtoRos(const fb::{msg_package}::msg::{msg_name}& src_ref)
{{
  const fb::{msg_package}::msg::{msg_name}* src = &src_ref;
  {msg_package}::msg::{msg_name} msg;{msg_decode_assignments}

  return msg;
}}

std::vector<{msg_package}::msg::{msg_name}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>>* src)
{{
  std::vector<{msg_package}::msg::{msg_name}> dst;
  dst.reserve(src->size());
  typedef flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>> fvec;
  for (fvec::const_iterator it = src->begin(); it != src->end(); ++it)
  {{
    dst.push_back(FbtoRos(*it));
  }}

  return dst;
  
}}

flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>>> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const std::vector<{msg_package}::msg::{msg_name}>& src)
{{
  std::vector<flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}>> dst(src.size());
  std::transform(
      src.begin(), src.end(), dst.begin(), [&fbb](const {msg_package}::msg::{msg_name}& item) {{
        return RostoFb(fbb, item);
      }});
  return fbb.CreateVector(dst).o;
}}

flatbuffers::Offset<fb::{msg_package}::msg::{msg_name}> RostoFb(flatbuffers::FlatBufferBuilder& fbb, const {msg_package}::msg::{msg_name}& msg)
{{
  return fb::{msg_package}::msg::Create{msg_name}(fbb, 0{msg_encode_assignments}).o;
}}

namespace {msg_package}_robofleet {{
    
  void {msg_name}SubscribeHandler::initialize(rclcpp::Node* node,
                                                 const std::string client_topic,
                                                 const bool latched)
  {{
    rclcpp::QoS qos(rclcpp::KeepLast(10));
    if (latched)
    {{
      qos.durability(RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL);
    }}

    ros_pub_ = node->create_publisher<MsgType>(client_topic,
                                              qos);
  }}

  const {msg_name}SubscribeHandler::FbMsgType*
  {msg_name}SubscribeHandler::decode(const QByteArray& data)
  {{
    const FbMsgType* root = 
      flatbuffers::GetRoot<FbMsgType>(data.data());

    return root;
  }}
  
  void {msg_name}SubscribeHandler::publishROS(const QByteArray& data)
  {{
    const FbMsgType* fb = decode(data);
    const MsgType msg = FbtoRos(fb);
    
    ros_pub_->publish(msg);
  }}
  


  void {msg_name}PublishHandler::initialize(rclcpp::Node* node,
                                              MessageScheduler& scheduler,
                                              const std::string client_topic,
                                              const std::string rbf_topic,
                                              const double priority,
                                              const double rate_limit,
                                              const bool no_drop,
                                              const int queue_size)
  {{
    robofleet_client::RBFPublishHandler::initialize(node,
                                                      scheduler,
                                                      client_topic,
                                                      rbf_topic,
                                                      priority,
                                                      rate_limit,
                                                      no_drop,
                                                      queue_size);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb, rosidl_generator_traits::data_type<MsgType>(),
                                           rbf_topic.c_str());
      }};

    ros_sub_ = node->create_subscription<MsgType>(client_topic,
                 queue_size, std::bind(&{msg_name}PublishHandler::callback, this, std::placeholders::_1));
  }}


  void {msg_name}PublishHandler::initialize(rclcpp::Node* node,
                                              WsServer& server,
                                              const std::string client_topic,
                                              const std::string rbf_topic)
  {{
    robofleet_client::RBFPublishHandler::initialize(node,
                                                      server,
                                                      client_topic,
                                                      rbf_topic);

    encode_metadata_function_ = [rbf_topic](flatbuffers::FlatBufferBuilder& fbb)
      {{
        return fb::CreateMsgMetadataDirect(fbb, rosidl_generator_traits::data_type<MsgType>(), rbf_topic.c_str());
      }};

    ros_sub_ = node->create_subscription<MsgType>(client_topic,
                 10, std::bind(&{msg_name}PublishHandler::callback, this, std::placeholders::_1));
  }}

  
  QByteArray {msg_name}PublishHandler::encodeWithMetadata(const MsgType& msg)
  {{
    flatbuffers::FlatBufferBuilder fbb;

    // encode the metadata
    const MetaDataOffset metadata = encode_metadata_function_(fbb);

    const flatbuffers::uoffset_t root_offset =
          fb::{msg_package}::msg::Create{msg_name}(fbb,
                                              metadata{msg_encode_assignments}).o;

    // encode the rest of the type
    fbb.Finish(flatbuffers::Offset<void>(root_offset));
    const QByteArray data{{reinterpret_cast<const char*>(fbb.GetBufferPointer()),
                          static_cast<int>(fbb.GetSize())}};

    return data;
  }}
  

  void {msg_name}PublishHandler::callback(const MsgType& msg)
  {{
    const QByteArray data = encodeWithMetadata(msg);
    schedule_function_(data);
  }}
}} // namespace {msg_package}_robofleet

#include <pluginlib/class_list_macros.hpp>
PLUGINLIB_EXPORT_CLASS({msg_package}_robofleet::{msg_name}SubscribeHandler, robofleet_client::RBFSubscribeHandler)
PLUGINLIB_EXPORT_CLASS({msg_package}_robofleet::{msg_name}PublishHandler, robofleet_client::RBFPublishHandler)