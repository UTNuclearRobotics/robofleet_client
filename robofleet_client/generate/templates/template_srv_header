#pragma once

// the plugin parent class
#include <robofleet_client/ROSSrvHandlers.hpp>

// get the srv type
#include <{srv_package}/srv/{srv_filename}.hpp>

#include <{srv_package}_robofleet/{srv_package}_generated.h>

// message dependencies
{dependencies}

/** Request Conversion Functions **/
{srv_package}::srv::{response_type} FbtoRos(const fb::{srv_package}::msg::{response_type}* src);

std::vector<{srv_package}::srv::{response_type}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{response_type}>>* src);

{srv_package}::srv::{request_type} FbtoRos(const fb::{srv_package}::msg::{request_type}* src);

std::vector<{srv_package}::srv::{request_type}> FbtoRos(const flatbuffers::Vector<flatbuffers::Offset<fb::{srv_package}::msg::{request_type}>>* src);

namespace {srv_package}_robofleet {{
  
  /** Request Handler **/
  class {srv_type}SrvInHandler : public robofleet_client::ROSSrvInHandler
  {{
  public:
    // sets up subscriber, message scheduler function, and metadata function
    virtual void initialize(std::shared_ptr<rclcpp::Node> node,
                            MessageScheduler& scheduler,
                            const std::string client_service,
                            const std::string rbf_topic,
                            const rclcpp::Duration timeout);
    
    virtual void initialize(std::shared_ptr<rclcpp::Node> node,
                            WsServer& scheduler,
                            const std::string client_service,
                            const std::string rbf_topic,
                            const rclcpp::Duration timeout);
  private:
    typedef {srv_package}::srv::{srv_type} SrvType;
    typedef {srv_package}::srv::{request_type} RequestType;
    typedef {srv_package}::srv::{response_type} ResponseType;
    typedef fb::{srv_package}::msg::{request_type} FbRequestType;
    typedef fb::{srv_package}::msg::{response_type} FbResponseType;

    // produces a buffer with metadata
    QByteArray encodeRequestWithMetadata(const std::shared_ptr<RequestType> msg);

    // converts from flatbuffer type to raw data
    QByteArray encodeRequest(const std::shared_ptr<RequestType> msg);

    // converts from raw data to flatbuffer type
    const FbResponseType* decodeResponse(const QByteArray& data);
    
    // encodes the message
    bool callback(const std::shared_ptr<RequestType> req,
                  std::shared_ptr<ResponseType> res);

    rclcpp::Service<SrvType>::SharedPtr server_;
  }};

    /** Response Handler **/
  class {srv_type}SrvOutHandler : public robofleet_client::ROSSrvOutHandler
  {{
  public:
    // sets up subscriber, message scheduler function, and metadata function
    virtual void initialize(std::shared_ptr<rclcpp::Node> node,
                            MessageScheduler& scheduler,
                            const std::string client_service,
                            const std::string rbf_topic);
    
    virtual void initialize(std::shared_ptr<rclcpp::Node> node,
                            WsServer& server,
                            const std::string client_service,
                            const std::string rbf_topic);

    virtual void sendRequest(const QByteArray& data,
                             const std::shared_ptr<rclcpp::Node> node,
                             const std::string client_service);

  private:
    typedef {srv_package}::srv::{srv_type} SrvType;
    typedef {srv_package}::srv::{request_type} RequestType;
    typedef {srv_package}::srv::{response_type} ResponseType;
    typedef fb::{srv_package}::msg::{request_type} FbRequestType;
    typedef fb::{srv_package}::msg::{response_type} FbResponseType;

    // converts from raw data to flatbuffer type
    const FbRequestType* decodeRequest(const QByteArray& data);

    // produces a buffer with metadata
    QByteArray encodeResponseWithMetadata(const std::shared_ptr<ResponseType> msg);

    rclcpp::Client<SrvType>::SharedPtr client_;
  }};
}}