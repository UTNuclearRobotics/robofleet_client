# Requires these plugin packages at runtime:
#   std_msgs_robofleet
#   geometry_msgs_robofleet
#   std_srvs_robofleet

params:
  # leave blank to run in Direct Mode
  host_url: "ws://192.168.1.11:8080"
  
  wait_for_pongs: true
  max_queue_before_waiting: 5

  # uncomment to run in Direct Mode
  #direct_mode_port: 8080
  #direct_mode_bytes_per_sec: 2048000

  # Verbosity 0 - MINIMAL
  # Verbosity 1 - CONFIG_ONLY
  # Verbosity 2 - ALL
  verbosity: 2

  # you may need more threads to handle a large amount of traffic
  spin_threads: 1

subscribers: [
  {
    # param: client_topic
    # type: string
    # The topic or service name used by the client
    client_topic: "/bool_topic",

    # param: rbf_topic
    # type: string
    # The topic name used by robofleet
    rbf_topic: "/bool_topic",

    # param: type
    # type: string
    # The ROS message type
    type: "std_msgs/Bool",

    # param: rate_limit (optional)
    # type: double (Hz)
    # The maximum rate at which the client will transmit for this topic
    rate_limit: 1.0,

    # param: priority (optional)
    # type: double
    # default: 1.0
    # Older messages are transmitted first, but a message's elapsed time is
    # weighted by the priority of the topic
    priority: 1.0,

    # param: no_drop (optional)
    # type: boolean
    # default: false
    # Topics with the no_drop flag receive absolute priority over those without
    no_drop: false
  },

  {
    client_topic: "/pose_topic",
    rbf_topic: "/NRG/move_base_simple/goal",
    type: "geometry_msgs/PoseStamped",

    # param: latched (optional)
    # type: boolean
    # default: false
    # Sets up a latched ROS publisher
    latched: false
  },

  {
    client_topic: "/status_topic",
    rbf_topic: "/test/status",
    type: "amrl_msgs/RobofleetStatus"
  }
]

publishers: [
  {
    client_topic: "/status_topic2",
    rbf_topic: "/2D_NRG_testbot/status",
    type: "amrl_msgs/RobofleetStatus"
  }
]